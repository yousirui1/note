qemu-system-arm -M vexpress-a9 -m 1024M -nographic -net nic -net tap,ifname=tap0,script=no -sd sdcard.ext3 -kernel u-boot

scripts/kconfig/lxdialog/dialog.h:38:20: fatal error: curses.h: No such file or directory

sudo apt-get install libncurses5-dev

busybox 需要静态编译


uImage "mkimage" command not found - U-Boot images will not be built
sudo apt-get install u-boot-tools

setenv ipaddr 192.168.131.100; setenv netmask 255.255.255.0; setenv serverip 192.168.131.129;
setenv bootargs "console=ttyAMA0 root=/dev/mmcblk0 init=/linuxrc rw rootwait"

tftp 0x60000000 uImage; tftp 0x70000000 device.dtb;fdt addr 0x70000000; bootm 0x60000000 - 0x70000000

setenv bootargs  rw rootfstype=ext3 console=ttySAC0,115200 init=/linuxrc

setenv bootargs root=/dev/sda1 rw rootfstype=ext3 console=ttySAC0,115200 init=/linuxrc mem=1024M mtdparts=armflash:1M@0x800000(uboot),7M@0x1000000(kernel),24M@0x2000000(initrd) mmci.fmax=190000 devtmpfs.mount=0 vmalloc=256M

setenv bootargs initrd=0x42000040,0x800000 root=/dev/ram0 rw rootfstype=ext2 console=ttySAC0,115200 init=/linux

sudo apt-get install flex bison
make rpi_3_defconfig

CROSS_COMPILE=arm-linux-gnueabihf- make all -j4 

rk3188 uboot
git clone https://github.com/rockchip-linux/u-boot.git

sudo apt-get install gcc-arm-linux-gnueabi

qemu-kvm 安装失败 glib 没有  A9 不支持kvm 不安装也行

glib zlib 编译

 GLib-WARNING **: /build/glib2.0-7ZsPUq/glib2.0-2.48.2/./glib/gmem.c:483: custom memory allocation vtable not supported

sudo apt-get install libgoogle-perftools-dev libgoogle-perftools4 libtcmalloc-minimal4


配置tftp
sudo apt-get install tftp-hpa tftpd-hpa
/etc/default/tftpd-hpa
sudo service tftpd-hpa restart	
TUN 虚拟网络 
sudo service tftpd-hpa restart


Qt4 
Basic XLib functionality test failed!
	
 libx11-dev libxext-dev libxtst-dev cmake 

WebKit Warning: -no-xrender 

apt-get install libxrender-dev

修改configure gcc 3.4 那增加当前gcc 版本

    {命令行下g++ -dumpversion > 4，适用下列解决方法}：将下列代码中4*|3.4*)改为9*|8*|7*|6*|5*|4*|3.4*)

                    case "$XPLATFORM" in         
                         *-g++*)
                                 case "$(${QMAKE_CONF_COMPILER} -dumpversion)" in  #QMAKE_CONF_COMPILER=`getXQMakeConf QMAKE_CXX`
                                    4*|3.4*)
                                          ;;
                                      3.3*)
                                       canBuildWebKit="no"
                                       ;;
                                        *)
                                    canBuildWebKit="no"
                                    canBuildQtXmlPatterns="no"
                                      ;;

openGL
sudo apt-get install libgl1-mesa-dev

在X86环境下构建出arm虚拟机可以模拟arm环境进行开发、在arm linux的文件系统中安装相应的库文件，编译arm版本等。

简单介绍下在X86环境下构建ARM虚拟机的步骤。

 

1、x86环境安装qemu-user-static
sudo apt-get install qemu-user-static

2、准备arm linux根文件系统
arm linux根文件系统可以直接下载干净的版本

或者从运行的arm单板上进行备份获取。

arm单板上备份根文件系统命令：

sudo tar -cvpzf rootfs.tgz --exclude=/proc --exclude=/mnt --exclude=/sys --exclude=/rootfs.tgz /
解压根文件系统命令：

tar -xvpfz rootfs.tgz -C ./
3、构建虚拟机
创建rootfs目录，在rootfs下执行根文件系统解压命令，解压完成后，copy qemu执行命令到arm文件系统中

sudo cp /usr/bin/qemu-arm-static usr/bin/
sudo cp /usr/bin/qemu-aarch64-static usr/bin/
在rootfs录下创建proc、sys、host目录

在rootfs所在目录下创建ch-mount.sh文件


复制代码
#!/bin/bash

function mnt() {
    echo "MOUNTING"
    sudo mount -t proc /proc ${2}proc
    sudo mount -t sysfs /sys ${2}sys    
    sudo mount -o bind /dev ${2}dev
    sudo mount -o bind /run ${2}run 
    sudo mount --bind / ${2}host
    #sudo mount -vt tmpfs shm ${2}dev/shm
    #sudo mount -t /dev/shm ${2}dev/shm
    sudo chroot ${2}
}

function umnt() {
    echo "UNMOUNTING"
    sudo umount ${2}proc
    sudo umount ${2}sys
    #sudo umount ${2}dev/shm
    sudo umount ${2}dev
    sudo umount ${2}run
    sudo umount ${2}host
}


if [ "$1" == "-m" ] && [ -n "$2" ] ;
then
    mnt $1 $2
elif [ "$1" == "-u" ] && [ -n "$2" ];
then
    umnt $1 $2
else
    echo ""
    echo "Either 1'st, 2'nd or both parameters were missing"
    echo ""
    echo "1'st parameter can be one of these: -m(mount) OR -u(umount)"
    echo "2'nd parameter is the full path of rootfs directory(with trailing '/')"
    echo ""
    echo "For example: ch-mount -m /media/sdcard/"
    echo ""
    echo 1st parameter : ${1}
    echo 2nd parameter : ${2}
fi
复制代码
执行ch-mount.sh，创建虚拟机

sudo ./ch-mount.sh -m rootfs/
arm虚拟机准备完毕，可以在虚拟的arm环境上进行相应的操作，创建用户、编译arm版本、......

4、卸载虚拟机
在虚拟机环境中执行exit退出。然后执行命令卸载挂载的相关文件。

 

sudo ./ch-mount.sh -u rootfs/
